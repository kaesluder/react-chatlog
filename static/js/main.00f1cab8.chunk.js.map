{"version":3,"sources":["components/TimeStamp.js","components/ChatEntry.js","components/ChatLog.js","App.js","registerServiceWorker.js","index.js"],"names":["TimeStamp","props","time","DateTime","fromISO","absolute","toFormat","relative","toRelative","title","ChatEntry","likedIcon","liked","localRemoteClass","localName","sender","className","body","timeStamp","onClick","event","handleLiked","id","ChatLog","entries","map","entry","App","useState","chatMessages","messagesState","setMessagesState","toggleLikedOnMessage","message","messages","Array","from","Set","m","getSenders","join","reduce","count","countLikes","predicateFunc","mutatorFunc","element","toggleLikedById","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.00f1cab8.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\n\nconst TimeStamp = (props) => {\n  const time = DateTime.fromISO(props.time);\n  const absolute = time.toFormat('MMMM Do YYYY, h:mm:ss a');\n  const relative = time.toRelative();\n\n  return <span title={absolute}>{relative}</span>;\n};\n\nexport default TimeStamp;\n","import React from 'react';\nimport './ChatEntry.css';\nimport PropTypes from 'prop-types';\nimport TimeStamp from './TimeStamp.js';\n\nconst emptyHeart = 'ü§ç';\nconst filledHeart = '‚ù§Ô∏è';\n\nconst ChatEntry = (props) => {\n  // console.log(`in ChatEntry: liked = ${props.liked}`);\n\n  // Set the display emoji for liked messages.\n  const likedIcon = props.liked ? filledHeart : emptyHeart;\n\n  // set the local/remote style\n  const localRemoteClass =\n    props.localName === props.sender ? 'local' : 'remote';\n\n  return (\n    <div className={'chat-entry ' + localRemoteClass}>\n      <h2 className=\"entry-name\">{props.sender}</h2>\n      <section className=\"entry-bubble\">\n        <p>{props.body}</p>\n        <p className=\"entry-time\">\n          <TimeStamp time={props.timeStamp}></TimeStamp>\n        </p>\n        <button\n          className=\"like\"\n          onClick={(event) => props.handleLiked(props.id)}\n        >\n          {likedIcon}\n        </button>\n      </section>\n    </div>\n  );\n};\n\nChatEntry.propTypes = {\n  id: PropTypes.number.isRequired,\n  sender: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  timeStamp: PropTypes.string.isRequired,\n  liked: PropTypes.bool.isRequired,\n  localName: PropTypes.string.isRequired,\n  handleLiked: PropTypes.func.isRequired,\n};\n\nexport default ChatEntry;\n","import React from 'react';\nimport './ChatLog.css';\nimport PropTypes from 'prop-types';\nimport ChatEntry from './ChatEntry';\n// import PropTypes from 'prop-types';\n\nconst ChatLog = function (props) {\n  //console.log('in ChatLog');\n  const _renderOneEntry = function (entry) {\n    //console.log('in _renderOneEntry');\n    return (\n      // for _renderOneEntry\n      <ChatEntry\n        key={entry.id}\n        id={entry.id}\n        sender={entry.sender}\n        body={entry.body}\n        liked={entry.liked}\n        timeStamp={entry.timeStamp}\n        localName={props.localName}\n        handleLiked={props.handleLiked}\n      ></ChatEntry>\n    );\n  };\n  return props.entries.map(_renderOneEntry); // from ChatLog\n};\nChatLog.propTypes = {\n  localName: PropTypes.string.isRequired,\n  handleLiked: PropTypes.func.isRequired,\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      sender: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      timeStamp: PropTypes.string.isRequired,\n      liked: PropTypes.bool.isRequired,\n    })\n  ).isRequired,\n  // setter: PropTypes.func.isRequired,\n};\nexport default ChatLog;\n","import React from 'react';\nimport './App.css';\nimport ChatLog from './components/ChatLog';\nimport chatMessages from './data/messages.json';\nimport { useState } from 'react';\n\nconst LOCAL_NAME = 'Vladimir';\n\n// Map over li applying mutatorFunction only when predicateFunction\n// returns true.\n// Takes: list, predicate function, mutator function\n// Returns: copy of list with replaced elements.\nconst mapWhen = function (li, predicateFunc, mutatorFunc) {\n  return li.map((element) => {\n    if (predicateFunc(element)) {\n      return mutatorFunc(element);\n    } else {\n      return element;\n    }\n  });\n};\n\nconst App = () => {\n  const [messagesState, setMessagesState] = useState(chatMessages);\n\n  // Returns a list of unique message senders from a list of messages.\n  // Takes list of messages.\n  // Returns list of unique senders.\n  const getSenders = function (messages) {\n    return Array.from(new Set(messages.map((m) => m.sender)));\n  };\n\n  // Takes list of messages.\n  // Returns count of liked messages.\n  const countLikes = function (messages) {\n    return messages.reduce(\n      (count, message) => (message.liked ? count + 1 : count),\n      0\n    );\n  };\n\n  // Toggle the liked field of a single message object.\n  // Takes a message object\n  // Returns new message with modified fields.\n  const toggleLikedOnMessage = (message) => {\n    return { ...message, liked: !message.liked };\n  };\n\n  // Toggles the liked field on a single message in list where\n  // id = message.id.\n  // Takes valid id and list of messages.\n  // Returns copy of list with changed message.\n  const toggleLikedById = function (id, messages) {\n    const newMessages = mapWhen(\n      messages,\n      (m) => m.id === id,\n      toggleLikedOnMessage\n    );\n    return newMessages;\n  };\n\n  // Sets the liked flag on a single message and saves state.\n  // Takes message id.\n  // Sets messageState triggering redraw of dependent JSX objects.\n  const handleLiked = function (id) {\n    // console.log(`in handle liked for: ${id}`);\n    setMessagesState((messagesState) => toggleLikedById(id, messagesState));\n  };\n\n  return (\n    <div id=\"App\">\n      <header>\n        <h1>\n          Chat between: {getSenders(messagesState).join(', ')}:&nbsp;\n          {countLikes(messagesState)} ‚ù§Ô∏ès\n        </h1>\n      </header>\n      <main>\n        <ChatLog\n          entries={messagesState}\n          handleLiked={handleLiked}\n          localName={LOCAL_NAME}\n        ></ChatLog>\n        {/* Wave  01: Render one ChatEntry component\n        Wave 02: Render ChatLog component */}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}